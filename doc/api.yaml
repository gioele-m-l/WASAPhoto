openapi: 3.0.3


info:
  title: WASAPhoto API specifications
  description: |
    API specifications of WASAPhoto, exam's project for
    the course Web and Software Architecture 2023/2024.
  version: 0.0.1



servers:
  - url: http://localhost:3000



tags:
  - name: Login
  - name: User Operations
  - name: Photo Operations



components:
#### SECURITY SCHEMES ####
  securitySchemes:

# BearerAuthentication #
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: string


#### SCHEMAS ####
  schemas:

### Minor schemas ###
    Image-path: 
      title: Image path
      description: |
        String with the path to the image.
      type: string
      format: uri
      pattern: 'image[-]?[0-9]+\.(jpg|png)'
    
    Timestamp:
      title: Timestamp
      description: |
        Date and time of creation of this object.
      type: string
      format: date-time
      readOnly: true


### USER RELATED SCHEMAS ###
    User-ID:
      title: User ID
      description: User unique identifier.
      type: integer
      minimum: 1
      example: 1
      readOnly: true

    Username:
      title: Username
      description: |
        Name that the user has chosen, the user can be
        found by other user with the username, a user
        can change its username.
      type: string
      example: Mario
      pattern: '^.*?$'
      minLength: 3
      maxLength: 16

# User schema #
    User:
      title: User
      description: |
        This object represents a single user and it's information.
      
      type: object
      properties:
        user-id: { $ref: "#/components/schemas/User-ID" }

        username: { $ref: "#/components/schemas/Username" }
          
        followers-count:
          description: |
            The number of users that follow this user.
          type: integer
          readOnly: true
          minimum: 0
          example: 10
        
        followings-count:
          description: |
            The number of users that this user follows.
          type: integer
          readOnly: true
          minimum: 0
          example: 10
        
        photos-count:
          description: |
            The number of photos of this user.
          type: integer
          readOnly: true
          minimum: 0
          example: 10
        
        profile-image-path: { $ref: "#/components/schemas/Image-path" }     

# User summary schema # 
    User-summary:
      title: User summary
      description: |
        Summary of User object infos
      type: object
      properties:
        user-id:        { $ref: "#/components/schemas/User-ID" }
        username:       { $ref: "#/components/schemas/Username" }
        profile-image-path:  { $ref: "#/components/schemas/Image-path" }

### PHOTO RELATED SCHEMAS ###
    Photo-ID:
      title: Photo ID
      description: Photo unique identifier.
      type: integer
      minimum: 1
      readOnly: true

# Image schema #
    Image:
      title: Image file
      description: |
        Binary string that represents an image.
      type: string
      format: binary
      minLength: 0
      maxLength: 16000000

# Photo schema #
    Photo:
      title: Photo
      description: |
        This object represents a single photo and it's informations.
      
      type: object
      properties:
        photo-id: { $ref: "#/components/schemas/Photo-ID" }
  
        timestamp: { $ref: "#/components/schemas/Timestamp" }
          
        owner: { $ref: "#/components/schemas/User-ID" } # Utilizzo l'user-id del proprietario

        image-path: { $ref: "#/components/schemas/Image-path" }
        
        likes-count:
          description: |
            Number of likes of this photo.
          type: integer
          minimum: 0
          readOnly: true
        
        comments-count:
          description: |
            Number of comments of this photo.
          type: integer
          minimum: 0
          readOnly: true
        
        caption:
          description: |
            Short text that can describe the photo, chosen by the owner.
          type: string
          minLength: 0
          maxLength: 100
          readOnly: false

### COMMENT SCHEMAS ###
    Comment-ID:
      title: Comment ID
      description: |
        Identifier of the comment object.
      type: integer
      minimum: 1
      readOnly: true
    
    Comment-text:
      title: Comment text
      description: |
        Short text for the user to tell something.
      type: string
      minLength: 0
      maxLength: 256
      readOnly: false

    Comment:
      title: Comment
      description: |
        This object represent a comment, with a comment-id and a text.
      
      type: object
      properties:
        comment-id: { $ref: "#/components/schemas/Comment-ID" }
           
        timestamp: { $ref: "#/components/schemas/Timestamp" }
        
        text: { $ref: "#/components/schemas/Comment-text" }
          


paths:

  /login:
    post:
      tags : ["Login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      
      operationId: doLogin
      
      requestBody:
        description: User details
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
        required: true

      responses:
        "201":
          description:  User log-in action successful
          content:
            application/json:
              schema:
                description: Object containing the user-id and the auth token
                type: object
                properties:
                  user-id: { $ref: "#/components/schemas/User-ID" }
                  auth-token:
                    description: |
                      Token string for the bearer authentication.
                    type: string
                    minLength: 32
                    maxLength: 32

### USER OPERATIONS ###
  /users/:
    parameters: 
      - name: search
        in: query
        schema: { $ref: "#/components/schemas/Username" }
        required: false
    
    get:
      tags: ["User Operations"]
      summary: Return a list of user-summary objs
      description: |
        Return a list of user-summary objects, given an username return the
        relative user-summary object.

      operationId: listUsers
      
      security:
        - BearerAuth: []
      
      responses:
        "200":
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                description: Array of user-summary objects
                type: array
                items: { $ref: "#/components/schemas/User-summary" }
                minItems: 0
                maxItems: 100
        
        "400":
          description: The parameter 'search' must be a string

  /users/{username}/:
    parameters:
      - name: username
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Username" }
    
    get:
      tags: ["User Operations"]
      summary: Get the user informations of a single user
      description: |
        Return a User object relative to the specified username.
      
      operationId: getUserProfile

      security:
        - BearerAuth: []
      
      responses:
        "200":
          description: User successfully returned
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }
        
        "400":
          description: The specified username in path must be a string
        "404":
          description: User not found
      
  /users/{username}/username:
    parameters:
      - name: username
        in: path
        required: true
        allowEmptyValue: false
        schema: { $ref: "#/components/schemas/Username" }

    put:
      tags: ["User Operations"]
      summary: Change the username
      description: |
        Change the username by chosing another valid one, an username to be valid
        must match the regex defined in the User schema and must not be already
        in use by another user.
      
      operationId: setMyUserName

      security:
        - BearerAuth: []
      
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Username" }
      
      responses:
        "200":
          description: Username changed successfully, return an User-summary object
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User-summary" }
        
        "400":
          description: The username must match the regex defined in the schema User
        
        "401":
          description: You must be logged in in order to make the request
        
        "403":
          description: The username is already in use or you are trying to change someone else's username
        
        "404":
          description: The user was not found
  
  /users/{username}/profile-image:
    parameters:
      - name: username
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Username" }
    
    put:
      tags: ["User Operations", "Photo Operations"]
      summary: Change teh user profile image
      description: |
        Upload an image that will be used as profile image for this user.
      
      operationId: uploadProfileImage

      security:
        - BearerAuth: []
      
      requestBody:
        content:
          image/png:
            schema: { $ref: "#/components/schemas/Image" }
          image/jpg:
            schema: { $ref: "#/components/schemas/Image" }
      
      responses:
        "204":
          description: New profile image uploaded
        
        "400":
          description: The image file must be a png or a jpg
        
        "401":
          description: You must be logged in order to use this operation
        
        "403":
          description: You cannot change another user's profile image
        
        "404":
          description: The specified user was not found
        
        "500":
          description: Internal server error
  
  /users/{username}/photos/:
    parameters:
      - name: username
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Username" }

    get:
      tags: ["User Operations", "Photo Operations"]
      summary: Get user photos
      description: |
        Return an array of photo-id, the next request should be a get /photos/{photo-id}/ for each photo-id.
      
      operationId: getUserPhotos

      security:
        - BearerAuth: []
      
      responses:
        "200":
          description: Array of photo-ids returned successfully
          content:
            application/json:
              schema:
                description: Array of photos.
                type: array
                items: { $ref: "#/components/schemas/Photo" }
                minItems: 0
                maxItems: 15
        
        "400":
          description: Bad request
        
        "401":
          description: Unauthorized, you must be logged in
        
        "404":
          description: User not found



  # AGGIUNGERE PATH: followers

  /users/{username}/followings/{user-id}:
    parameters:
      - name: username
        in: path
        schema: { $ref: "#/components/schemas/Username" }
        required: true
      - name: user-id
        in: path
        schema: { $ref: "#/components/schemas/User-ID" }
        required: true
    
    put:
      tags: ["User Operations"]
      summary: Follow user
      description: |
        Add the specified user-id of an User to the followed users list of this user.
      
      operationId: followUser

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: User followed successfully
        
        "400":
          description: |
            'username' in path must be a string and 'user-id' must be an integer.
        
        "404":
          description: user-id not found.
    
    delete:
      tags: [User Operations]
      summary: Unfollow user
      description: |
        Remove the specified user-id of an User to the followed users list of this user.
      
      operationId: unfollowUser

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: User unfollowed successfully
        
        "400":
          description: |
            'username' in path must be a string and 'user-id' must be an integer.
        
        "404":
          description: user-id not found.

  /users/{username}/banned/{user-id}:
    parameters:
      - name: username
        in: path
        schema: { $ref: "#/components/schemas/Username" }
        required: true
      - name: user-id
        in: path
        schema: { $ref: "#/components/schemas/User-ID" }
        required: true
    
    put:
      tags: ["User Operations"]
      summary: Ban user
      description: |
        Add the specified user-id to the banned list of this user.
      
      operationId: banUser

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: User banned successfully
        
        "400":
          description: |
            'username' in path must be a string and 'user-id' must be an integer.
        
        "404":
          description: user-id not found.
    
    delete:
      tags: ["User Operations"]
      summary: Unban user
      description: |
        Remove the specified user-id from the banned list of this User.
      
      operationId: unbanUser

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: User unbanned successfully
        
        "400":
          description: |
            'username' in path must be a string and 'user-id' must be an integer.
        
        "404":
          description: user-id not found.


### PHOTO OPERATIONS ###
  /photos/:
    
    get:
      parameters:
      - name: page
        in: query
        description: |
          This parameter is used to load a specified array of photo objects,
          incrementing this number the server returns you new array of photos.
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 1
      - name: numberOfPhotos
        in: query
        description: |
          This parameter is used to tell the server how many photos you want per page,
          the minimum is 0, the maximum is 20 and the default is 12.
        required: false
        schema:
          type: integer
          minimum: 0
          maximum: 20
          default: 12
      
      tags: ["Photo Operations"]
      summary: Get the stream of photos
      description: |
        Return an array of photos in reverse chronological order, different photos are
        returned based on the page number.
      
      operationId: getMyStream

      security:
        - BearerAuth: []
      
      responses:
        "200":
          description: Array of photos successfully returned
          content:
            application/json:
              schema:
                type: object
                description: Object containing an array of photos and the page number.
                properties:
                  page:
                    description: The number of the page.
                    type: integer
                    minimum: 1
                    maximum: 100
                    default: 1
                  photos:
                    description: Array of photos.
                    type: array
                    items: { $ref: "#/components/schemas/Photo" }
                    minItems: 0
                    maxItems: 20

        "400":
          description: The parameters must be integers and must be inbounds.
        
        "401":
          description: You have to login
    
    post:
      tags: ["Photo Operations"]
      summary: Post a photo
      description: |
        Publish a photo with informations related to it and the image file.
      
      operationId: uploadPhoto

      security:
        - BearerAuth: []
      
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              description: Object containing a caption and the image file.
              type: object
              properties:
                caption:
                  description: Short text where the user can say something.
                  type: string
                  minLength: 0
                  maxLength: 100
                
                image: { $ref: "#/components/schemas/Image" }
              required:
                - image
            encoding:
              image:
                contentType: image/png, image/jpeg
      
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
        
        "400":
          description: Something is wrong in the request
        
        "401":
          description: Before uploading a photo you must be logged in

  /photos/{photo-id}/:
    parameters:
      - name: photo-id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Photo-ID" }
    
    delete:
      tags: ["Photo Operations"]
      summary: Delete a photo
      description: |
        Delete the specified photo object, also delete all the likes, the comments and the image file
        related to this object.
      
      operationId: deletePhoto

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: Photo deleted successfully
        
        "400":
          description: Something is wrong with the type of the photo-id parameter
        
        "401":
          description: You must be logged in before deleting a photo
        
        "403":
          description: You can't delete someone else's photo
        
        "404":
          description: The specified photo was not found
  
  /images/{image-id}:
    parameters:
      - name: image-id
        in: path
        required: true
        schema:
          type: string
          pattern: 'image[-]?[0-9]+\.(jpg|png)'
    
    get:
      tags: ["Photo Operations"]
      summary: Get an image
      description: |
        Given the specified path, return the image file.
      
      operationId: getImageFile

      security:
        - BearerAuth: []
      
      responses:
        "200":
          description: Image file returned successfully
          content:
            image/png:
              schema: { $ref: "#/components/schemas/Image" }
            image/jpg:
              schema: { $ref: "#/components/schemas/Image" }
        
        "400":
          description: Invalid image path
        
        "401":
          description: You need to login first
        
        "403":
          description: You cannot retrieve this file
        
        "404":
          description: Image not found
  
  /photos/{photo-id}/likes/{user-id}:
    parameters:
      - name: photo-id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Photo-ID" }
      - name: user-id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/User-ID" }
    
    put:
      tags: ["Photo Operations"]
      summary: Like a photo
      description: |
        Specifying the photo and the user(me), add a like.
      
      operationId: likePhoto

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: Like added successfully
        
        "400":
          description: Something wrong in the parameters
        
        "401":
          description: You must be logged in before liking a photo
        
        "403":
          description: You already like the photo, cannot like it again, unlike it first
        
        "404":
          description: The specified photo was not found
    
    delete:
      tags: ["Photo Operations"]
      summary: Unlike a photo
      description: |
        Specifying the photo and the user(me), remove a like.
      
      operationId: unlikePhoto

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: Like removed successfully
        
        "400":
          description: Something wrong in the parameters
        
        "401":
          description: You must be logged in before liking a photo
        
        "403":
          description: You already unlike the photo, cannot unlike it again, add a like first
        
        "404":
          description: The specified photo was not found
  
  /photos/{photo-id}/comments/:
    parameters:
      - name: photo-id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Photo-ID" }
    
    post:
      tags: ["Photo Operations"]
      summary: Add a comment to the photo
      description: |
        Given a correct photo-id, add a comment to the comments list of the photo
        and increase its comments-count.
      
      operationId: commentPhoto

      security:
        - BearerAuth: []
      
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Comment" }
      
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Comment" }
        
        "400":
          description: Something is wrong in the parameters or in the request body
        
        "401":
          description: You must be logged in to comment a photo
        
        "404":
          description: The specified photo was not found
  
  /photos/{photo-id}/comments/{comment-id}:
    parameters:
      - name: photo-id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Photo-ID" }
      - name: comment-id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/Comment-ID" }
    
    delete:
      tags: ["Photo Operations"]
      summary: Delete a comment
      description: |
        Given a photo-id and a comment-id if correct and the comment belong to the user
        that want to delete it, delete the comment from the photo's list of comments.
      
      operationId: uncommentPhoto

      security:
        - BearerAuth: []
      
      responses:
        "204":
          description: Comment deleted successfully
        
        "400":
          description: Something is wrong in the parameters, check the type
        
        "401":
          description: You have to login before deleting a comment from a photo
        
        "403":
          description: You cannot delete someone else's comment
        
        "404":
          description: The specified photo or the specified comment was not found
